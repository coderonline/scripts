#!/bin/bash
# scanbutton.bsh
# Copyright 2014 Max Christian Pohle [max AT coderonline.de]
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# requires: 
# perl, perl-Sane, html2text, espeak, tesseract (+languagepack of your choice)
#
# yum -y install perl, perl-Sane, html2text espeak tesseract "tesseract-langpack-*"


EVINCE_PID=0
while [[ true ]]; 
do
  
BASE_PATH=$(dirname $(realpath $0))
TMP_FOLDER=$(mktemp -d)
TMP_PDF_FILE=$TMP_FOLDER/output.pdf
TMP_PDFMARK_FILE=$TMP_FOLDER/output.ascii
TMP_PNM_FILE=$TMP_FOLDER/output.pnm
TMP_HOCR_FILE=$TMP_FOLDER/output.hocr
TMP_TEXT_FILE=$TMP_FOLDER/output.txt
TMP_HOCR_BASENAME=$TMP_FOLDER/$(basename -s .hocr $TMP_HOCR_FILE)


echo "running from $BASE_PATH"
echo "temporary saving to $TMP_HOCR_BASENAME"


export TESSDATA_PREFIX="$BASE_PATH/cfg/tesseract/"
echo "using $TESSDATA_PREFIX as config folder for tesseract"

RESULT=$(perl -w $BASE_PATH/scanbutton_wait.pl)
if [[ $EVINCE_PID != 0 ]]; then
  kill $EVINCE_PID
fi
  

      #--swderotate=yes \
      #--swdeskew=yes \
case $RESULT in
  *)   
    scanimage \
      -x 210 \
      -y 295 \
      -p \
      --swdespeck=yes \
      --despeck 2 \
      --threshold 40% \
      --threshold-curve 10 \
      --mode=lineart \
      --preview=no \
      --resolution 300 > $TMP_PNM_FILE
    #tee $TMP_PNM_FILE |
    #pnmtops -equalpixels -nocenter - | 
    #ps2pdf -sPAPERSIZE=a4 -dNOPAUSE -dBATCH - > output.pdf 
    
    echo tesseract $TMP_PNM_FILE $TMP_HOCR_BASENAME -l deu hocr
    #tesseract $TMP_PNM_FILE $TMP_HOCR_BASENAME -l deu hocr # old syntax
    tesseract $TMP_PNM_FILE $TMP_HOCR_BASENAME -c tessedit_create_hocr=1 -l deu

    echo python2 /home/max/src/OCRmyPDF/src/hocrTransform.py -r 300 -i $TMP_PNM_FILE $TMP_HOCR_FILE $TMP_PDF_FILE
    python2 $BASE_PATH/hocrTransform.py -r 300 -i $TMP_PNM_FILE $TMP_HOCR_FILE $TMP_PDF_FILE

    # if hocrtransform is not found...
    # convert output.pnm -page A4+0+0 outputa4.pdf 
    echo "converting HOCR to plain text file and remove non printable chars (except newline)..."
    html2text $TMP_HOCR_FILE | tr -dc '[[:print:]|\n]' > $TMP_TEXT_FILE

    echo "fixing broken dates with too many spaces or other delimeters..."
    sed -i -re "s/[0Oo]?([0-9]{1,2})\.[0oO]?([0-9]{1,2})\.([0-9]{2}) /\1.\2.20\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(Januar|Jan)[-_\ \.:,\/]+(20[0-9]{2})/\1.01.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(Februar|Feb)[-_\ \.:,\/]+(20[0-9]{2})/\1.02.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(März|Mar)[-_\ \.:,\/]+(20[0-9]{2})/\1.03.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(April|Apr)[-_\ \.:,\/]+(20[0-9]{2})/\1.04.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(Mai|May)[-_\ \.:,\/]+(20[0-9]{2})/\1.05.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(Juni|Jun)[-_\ \.:,\/]+(20[0-9]{2})/\1.06.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(Juli|Jul)[-_\ \.:,\/]+(20[0-9]{2})/\1.07.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(August|Aug)[-_\ \.:,\/]+(20[0-9]{2})/\1.08.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(September|Sep)[-_\ \.:,\/]+(20[0-9]{2})/\1.09.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(Oktober|Okt|Oct)[-_\ \.:,\/]+(20[0-9]{2})/\1.10.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(November|Nov)[-_\ \.:,\/]+(20[0-9]{2})/\1.11.\3/" $TMP_TEXT_FILE
    sed -i -re "s/([0-9]{1,2})[-_\ \.:,\/]+(Dezember|Dez|Dec)[-_\ \.:,\/]+(20[0-9]{2})/\1.12.\3/" $TMP_TEXT_FILE
    sed -i -re "s/$DE_REGEX_DATE/\1.\2.\3/" $TMP_TEXT_FILE

    echo "trying to parse date..."
    DE_REGEX_DATE='[0oO]?([0-9]{1,2})[-_\ \.:,\/]+[0oO]?([0-9]{1,2}|Januar|Februar|März|April|Mai|Juni|Juli|August|September|Oktober|November|Dezember|Jan|Feb|Mar|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Dez)[-_\ \.:,\/]+(20[0-9]{2})'
    MYDATE=$(grep -Po "$DE_REGEX_DATE" "$TMP_TEXT_FILE" | head -n1)

    NEWNAME=''
    #FINALPOSTFIX=$(date +%s)
    FINALPOSTFIX=$(date '+%Y%M%d%H%M%S')
    DATECREATE=$FINALPOSTFIX
    if [[ $MYDATE =~ $DE_REGEX_DATE ]]; then
      DATECREATE=$(printf "%02d%02d0000%04d" $(echo $MYDATE | sed -re "s/$DE_REGEX_DATE/\2 \1 \3/"))
      FINALDATE=$(printf "%04d-%02d-%02d" $(echo $MYDATE | sed -re "s/$DE_REGEX_DATE/\3 \2 \1/"))
      NEWNAME=$(printf "%s_%s.pdf" $FINALDATE $FINALPOSTFIX)
      espeak -s 200 -g10 $FINALDATE &
    else
      NEWNAME=$(printf "%s.pdf" $FINALPOSTFIX)
      espeak -s 200 -g10 "Datum nicht gefunden!" &
    fi

    echo "collecting metadata for pdf creation..."
    WHOAMI=$(getent passwd $(whoami) | cut -d ':' -f 5)
    echo "Author: $WHOAMI";
    MYMAIL=$(grep -Po '\S+@\S+' "$TMP_TEXT_FILE" | head -n1)
    echo "Mail: $MYMAIL";
    MYKEYW=$(grep -Po '[A-Z][a-z]{3,8}' $TMP_TEXT_FILE | xargs -I'{}' printf  '{},')
    echo "Keywords: $MYKEYW"
    
    echo "[ "                           > $TMP_PDFMARK_FILE
    echo "/Author ($WHOAMI)"           >> $TMP_PDFMARK_FILE
    echo "/Creator ($WHOAMI)"          >> $TMP_PDFMARK_FILE
    echo "/Producer ($WHOAMI)"         >> $TMP_PDFMARK_FILE
    echo "/Keywords ($MYKEYW)"         >> $TMP_PDFMARK_FILE
    echo "/Subject ()"                 >> $TMP_PDFMARK_FILE 
    echo "/Title ()"                   >> $TMP_PDFMARK_FILE 
    echo "/ModDate ($FINALPOSTFIX)"    >> $TMP_PDFMARK_FILE 
    echo "/CreationDate ($DATECREATE)" >> $TMP_PDFMARK_FILE 
    echo "/DOCINFO pdfmark"            >> $TMP_PDFMARK_FILE 


    echo "saving, adding metadata and compressing $TMP_PDF_FILE to $NEWNAME..."
    gs \
      -dSAFER \
      -dQUIET \
      -dBATCH \
      -dNOPAUSE \
      -dUseCropBox \
      -dFIXEDMEDIA \
      -sDEVICE=pdfwrite \
      -dCompatibilityLevel="1.5" \
      -dSubsetFonts=false \
      -dEmbedAllFonts=false \
      -sPAPERSIZE=a4 \
      -sOutputFile=$NEWNAME \
      -r300\
      -f $TMP_PDF_FILE \
      $TMP_PDFMARK_FILE
    #rm -rf $TMP_FOLDER
    evince -f $NEWNAME &
    EVINCE_PID=$!
  ;;
  "extra")  echo "EXTRA";;
  "scan")   echo "0";;
  *)        echo "ERR> undefined button: $RESULT";;
esac


done;
